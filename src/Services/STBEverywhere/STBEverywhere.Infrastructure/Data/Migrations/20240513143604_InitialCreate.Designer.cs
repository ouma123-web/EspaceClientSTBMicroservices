// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STBEverywhere.Infrastructure.Data;

#nullable disable

namespace STBEverywhere.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240513143604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("STBEverywhere.Domain.Models.Carte", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CodeSecretCarte")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateExpiration")
                        .HasColumnType("date");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCarte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Débloqué");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cartes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Carte");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CarteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Téléphone")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Compte", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOuverture")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumCompte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OpérationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClientId1");

                    b.HasIndex("OpérationId");

                    b.ToTable("Comptes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Compte");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Opération", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Out");

                    b.Property<string>("Visualisation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Opérations");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CarteElectronique", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Carte");

                    b.Property<int>("CarteId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CarteElectronique");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CarteVisaPremier", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Carte");

                    b.Property<int>("CarteId")
                        .HasColumnType("int");

                    b.ToTable("Cartes", t =>
                        {
                            t.Property("CarteId")
                                .HasColumnName("CarteVisaPremier_CarteId");
                        });

                    b.HasDiscriminator().HasValue("CarteVisaPremier");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CompteCheque", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Compte");

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CompteCheque");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CompteCourant", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Compte");

                    b.Property<int>("AuthorisationDecouvert")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CompteCourant");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CompteEnDevise", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Compte");

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.ToTable("Comptes", t =>
                        {
                            t.Property("CompteId")
                                .HasColumnName("CompteEnDevise_CompteId");
                        });

                    b.HasDiscriminator().HasValue("CompteEnDevise");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.CompteEpargne", b =>
                {
                    b.HasBaseType("STBEverywhere.Domain.Models.Compte");

                    b.Property<decimal>("TauxDeRemuneration")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("CompteEpargne");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Carte", b =>
                {
                    b.HasOne("STBEverywhere.Domain.Models.Client", null)
                        .WithMany("Cartes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Compte", b =>
                {
                    b.HasOne("STBEverywhere.Domain.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STBEverywhere.Domain.Models.Client", null)
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId1");

                    b.HasOne("STBEverywhere.Domain.Models.Opération", null)
                        .WithMany("Comptes")
                        .HasForeignKey("OpérationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Client", b =>
                {
                    b.Navigation("Cartes");

                    b.Navigation("Comptes");
                });

            modelBuilder.Entity("STBEverywhere.Domain.Models.Opération", b =>
                {
                    b.Navigation("Comptes");
                });
#pragma warning restore 612, 618
        }
    }
}
